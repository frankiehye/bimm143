---
title: "Class 12: RNA-Seq Analysis"
author: "Hyeseung (Frankie) Son PID: A16025601"
format: html
editor: visual
---

## Quarto

Here we will be using DESeq package for RNA seq analysis. The data for today's class comes from a study of airway smooth muscle cells in a published RNA-seq experiment where airway smooth muscle cells were treated with dexamethasone, a synthetic glucocorticoid steroid with anti-inflammatory effects (Himes et al. 2014).

## Import Data

We need two things for today's analysis:

-   **countData** (counts for every transcript/gene in each experiment)
-   **colData** (metadata that describes the environmental setup)

```{r}
countData <- read.csv("airway_scaledcounts.csv", row.names = 1)
head(countData)
```

```{r}
metadata <- read.csv("airway_metadata.csv")
head(metadata)
```

> Q1. How many genes are in this dataset?

```{r}
nrow(countData)
```

There are 38,694 genes in this data set.

> Q2. How many 'control' cell lines do we have?

```{r}
table (metadata$dex)
```

another way:

```{r}
sum (metadata$dex == "control")
```

There are 4 control cell lines in this data set.

> Q3. How would you make the above code in either approach more robust?

-   Step 1. Calculate the mean of control samples (i.e. columns in countData) Calculate the mean of treated samples.

(a) We need to find which columns in countData are "control" samples.

-   look in the metadata (a.k.a. colData), \$dex column

```{r}
control.inds <- metadata$dex == "control"
```

(b) Extract all the control columns from `countData` and call it `control.counts`

```{r}
control.counts <- countData[ , control.inds]
```

(c) Calculate the mean value across the rows of `control.counts` i.e. calculate the mean count values for each gene in the control samples.

```{r}
control.means <- rowMeans(control.counts)
head(control.means)
```

> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)

-   Step 2. Calculate the mean of the treated samples ...

```{r}
# We need to find which columns in countData are "treated" samples.
treated.inds <- metadata$dex == "treated"

# Extract all the control columns from `countData` and call it `treated.counts`.
treated.counts <- countData[ , treated.inds]

# Calculate the mean value across the rows of `treated.counts`.
treated.means <- rowMeans(treated.counts)
head(treated.means)
```

We now have control and treated mean count values. For ease of book-keeping I will combine these vectors into a new data.frame called `meancounts`

```{r}
meancounts <- data.frame(control.means, treated.means)
head(meancounts)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples.

```{r}
plot(meancounts)
```

> Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom\_?() function would you use for this plot?

If using ggplot2, we would use the \`geom_point() layer.

```{r}
library(ggplot2)

ggplot(meancounts) +
  aes(control.means, treated.means) +
  geom_point()
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this?

The plot argument `log = xy` allows us to plot both axes on a log10 scale.

```{r}
plot(meancounts, log = "xy")
```

```{r}
zero.vals <- which(meancounts[,1:2]==0, arr.ind=TRUE)

to.rm <- unique(zero.vals[,1])
mycounts <- meancounts[-to.rm,]
head(mycounts)
```

> Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

The arr.ind=TRUE argument will lead which() to return both the row and column indices, where there are TRUE values. Here, this will tell us which rows and columns have zero counts, and ignore them. Calling unique() ensures we don't count any row twice if it has zero entries in both samples.

Let's transform our data into something more useful. We use log transforms for skewed data such as this because we really care most about relative changes in magnitude.

We most often use log2 as our transform as the math is easier to interpret than log10 or others.

If we have no change - i.e. same values in control and treated, we will have a log2 value of 0.

```{r}
log2(20/20)
```

If I have double the amount, I will have a log2 fold change of +1.

```{r}
log2(20/10)
```

If I have half the amount, I will have a log2 fold change of -1.

```{r}
log2(10/20)
```

```{r}
meancounts$log2fc <- log2(meancounts$treated.means / meancounts$control.means)
head(meancounts)
```

> Q8. How many genes are upregulated at the common threshold of +2 logFC values?

```{r}
sum (meancounts$log2fc >= 2, na.rm = TRUE)
```

> Q9. Can you determine how many down regulated genes we have at the greater than 2 fc level?

```{r}
# for genes downregulated beyond the -2 threshold
sum (meancounts$log2fc < -2, na.rm = TRUE)

# for genes down regulated at & beyond the -2 threshold
sum (meancounts$log2fc <= -2, na.rm = TRUE)
```

Hold on, what about the stats! Yes these are big changes but are they significant changes?

> Q10. Do you trust these results? Why or why not?

We have yet to run a statistical analaysis to determine if the differences between the treated and control groups are statistically significant. To do this properly, we will turn to the DESeq2 package.

## DESeq2 Analysis

```{r}
#| message: false
library(DESeq2)
```

To use our DESeq we need our input countData and colData in a specific format that DESeq wants:

```{r}
dds <- DESeqDataSetFromMatrix(countData = countData, 
                       colData = metadata,
                       design = ~dex)
```

To run the analysis, I can now use the main DESeq2 function called `DESeq()` with `dds` as input.

```{r}
dds <- DESeq(dds)
```

To get the results out of this `dds` object we can use the `results()` function from the package.

```{r}
res <- results(dds)
head(res)
```

Let's make a final (for today) plot of log2 fold-change vs the adjusted p-value.

```{r}
plot(res$log2FoldChange, res$padj)
```

It is the low P-values that we care about and these are lost in the skewed plot above.

```{r}
plot(res$log2FoldChange, -log(res$padj))
abline(v=c(+2, -2), col = "blue")
abline(h=-log(0.05), col = "blue")
```

Finally we can make a color vector to use in the plot to better highlight the genes we care about.

```{r}
mycols <- rep("gray", nrow(res))
mycols[abs(res$log2FoldChange) >= 2] <- "red"
mycols[res$padj > 0.05] <- "gray"

plot(res$log2FoldChange, -log(res$padj), col=mycols)
abline(v=c(+2, -2), col = "blue")
abline(h=-log(0.05), col = "blue")
```

We're done for the day :).

## Adding Annotation data

We will use one of Bioconductorâ€™s main annotation packages to help with mapping between various ID schemes. We'll use the AnnotationDbi package and the annotation data package for humans org.Hs.eg.db.

```{r}
head(res)
```

We can translate (a.k.a. "map") between all these database id formats
```{r}
library("AnnotationDbi")
library("org.Hs.eg.db")

columns(org.Hs.eg.db)
```

My ids are stored as the rownames of `res`.
```{r}
head( rownames(res) )
```

```{r}
res$symbol <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="SYMBOL",     # The new format we want to add
                     multiVals="first")
```

```{r}
head(res)
```

> Q11. Run the mapIds() function two more times to add the Entrez ID and UniProt accession and GENENAME as new columns called res$entrez, res$uniprot and res$genename.

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="ENTREZID",     # The new format we want to add
                     multiVals="first")
```
```{r}
res$uniprot <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="UNIPROT",   # The new format we want to add
                     multiVals="first")
```

```{r}
res$genename <- mapIds(org.Hs.eg.db,
                     keys=row.names(res), # Our genenames
                     keytype="ENSEMBL",   # The format of our genenames
                     column="GENENAME",   # The new format we want to add
                     multiVals="first")
```

## Save our results to date

```{r}
write.csv(res, file="myresults.csv")
```

## Pathway analysis

We can use the KEGG database of biological pathways to get some more insight into our differentially expressed genes and the kinds of biology they are involved in. 

```{r} 
# results = hide
library(pathview)
library(gage)
library(gageData)
```

Look at the first two KEGG pathways.
```{r}
data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

Make a new vector of fold-change values that I will use as input for `gage` this will have the ENTREZ IDs as names. 

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez

head(foldchanges)
```

```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Let's look at the attributes of keggres
```{r}
attributes(keggres)
```

Look at the top 3 "LESS"
```{r}
head(keggres$less, 3)
```

Now I can use the KEGG IDs of these pathways from gage to view our genes mapped to these pathways. 

```{r}
# message = false
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![Asthma pathway from KEGG with our genes shown in color](hsa05310.pathview.png)