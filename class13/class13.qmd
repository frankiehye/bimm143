---
title: "Class 13: RNA Seq Analysis Mini Project"
author: "Frankie (Hyeseung) Son PID: A16025601"
format: html
editor: visual
---

## Differential Expression Analysis

Let's load our DESeq2 package and our data sets
```{r message = FALSE, warning = FALSE}
library(DESeq2)
```

```{r}
metaFile <- "GSE37704_metadata.csv"
countFile <- "GSE37704_featurecounts.csv"

# Import metadata and take a peak
metadata = read.csv(metaFile, row.names=1)
head(metadata)
```

```{r}
# Import countdata
countData = read.csv(countFile, row.names=1)
head(countData)
```

We need the countData and colData files to match up so we will need to remove that odd first column in countData namely contData$length.

> Q. Complete the code below to remove the troublesome first column from countData

To remove the first column we use the negative (-) sign infront of the column number.
```{r}
# Note we need to remove the odd first $length col
countData <- as.matrix(countData[, -1])
head(countData)
```

This is better but there are lots of zero entries in there so let's get rid of them as we have no data for these.

> Q. Complete the code below to filter countData to exclude genes (i.e. rows) where we have 0 read count across all samples (i.e. columns).

We'll use rowSums()

```{r}
zerocounts <- rowSums(countData) == 0
head(zerocounts)
```
```{r}
newcounts <- countData[!zerocounts, ]

head(newcounts)
```

```{r}
nrow(newcounts)
```
We've got 15,975 genes left with non-zero readings. 

# Setup and Running DESeq2

```{r message = FALSE, warning = FALSE}

dds = DESeqDataSetFromMatrix(countData = newcounts,
                             colData = metadata,
                             design = ~condition)
dds = DESeq(dds)
```

```{r}
dds
```

Let's get results for HoxA1 knockdown versus control siRNA ("hoxa1_kd" and "control_sirna" by running resultsNames(dds) command).

```{r}
res = results(dds, contrast=c("condition", "hoxa1_kd", "control_sirna"))
```

> Q. Call the summary() function on your results to get a sense of how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
summary(res)
```

## Annotate results

> Q. Use the mapIDs() function multiple times to add SYMBOL, ENTREZID and GENENAME annotation to our results by completing the code below.

I need to add annotation to my results including gene symbols and entrezids, etc. For this I will use the **Annotation Dbi package**. 
```{r message= FALSE, warning = FALSE}
library(AnnotationDbi)
library("org.Hs.eg.db")

columns(org.Hs.eg.db)
```

Let's annotate:
```{r}
res$symbol = mapIds(org.Hs.eg.db,
                    keys=row.names(res), 
                    keytype="ENSEMBL",
                    column="SYMBOL",
                    multiVals="first")

res$entrez = mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="ENTREZID",
                    multiVals="first")

res$name =   mapIds(org.Hs.eg.db,
                    keys=row.names(res),
                    keytype="ENSEMBL",
                    column="GENENAME",
                    multiVals="first")

head(res, 10)
```

# Save Results

> Q. Finally for this section let's reorder these results by adjusted p-value and save them to a CSV file in your current project directory.

```{r}
res = res[order(res$pvalue),]
write.csv(res, file="deseq_results.csv")
```

# Volcano Plot

```{r}
plot( res$log2FoldChange, -log(res$padj) )
```

> Q. Improve this plot by completing the below code, which adds color and axis labels. Account for how many genes are up or down-regulated at the default 0.1 p-value cutoff.

```{r}
# Make a color vector for all genes
mycols <- rep("gray", nrow(res) )

# Color red the genes with absolute fold change above 2
mycols[ abs(res$log2FoldChange) > 2 ] <- "red"

# Color blue those with adjusted p-value less than 0.01 and absolute fold change more than 2
inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"

#Volcano plot
plot( res$log2FoldChange, -log(res$padj), col=mycols, xlab="Log2(FoldChange)", ylab="-Log(P-value)" )
```

# KEGG Pathway Analysis

```{r}
library(gage)
library(gageData)

data(kegg.sets.hs)
data(sigmet.idx.hs)

# Focus on signaling and metabolic pathways only
kegg.sets.hs = kegg.sets.hs[sigmet.idx.hs]

# Examine the first 3 pathways
head(kegg.sets.hs, 3)
```

The main gage() function requires a named vector of fold changes, where the names of the values are the Entrez gene IDs.

We used the mapIDs() function above to get Entrez gene IDs (stored in `res$entrez`) and the fold change results from DESeq2 analysis (stored in `res$log2FoldChange`).

```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```

Now, let’s run the gage pathway analysis.
```{r}
# Get the results
keggres = gage(foldchanges, gsets=kegg.sets.hs)
```

Now lets look at the object returned from gage().
```{r}
# Look at the first few down (less) pathways
head(keggres$less)
```

Each `keggres$less` and `keggres$greater` object is a data matrix with gene sets as rows sorted by p-value. The top "less/down" pathways is "Cell cycle" with the KEGG pathway identifier hsa04110.

Use the pathview() function from the pathview package to make a pathway plot with our RNA-Seq resultsin color. We need to supply a pathway.id (the first part of the "hsa04110 Cell cycle") seen from the print out above.

```{r message = FALSE, warning = FALSE}

library(pathview, quietly=TRUE, verbose=FALSE)
pathview(gene.data=foldchanges, pathway.id="hsa04110")
```

This downloads the pathway figure data from KEGG and adds our results to it. 

Here is the default low resolution raster PNG output from the pathview() call above:

![Figure of KEGG Pathways colored by Gene](hsa04110.pathview.png)
```{r}
# Focus on top 5 upregulated pathways here for demo purposes only
keggrespathways <- rownames(keggres$greater)[1:5]

# Extract the 8 character long IDs part of each string
keggresids = substr(keggrespathways, start=1, stop=8)
keggresids
```
Pass these IDs in keggresids to the pathview() function to draw plots for all the top 5 pathways.

```{r message = FALSE, warning = FALSE}
pathview(gene.data=foldchanges, pathway.id=keggresids, species="hsa")
```

![Hematopoeic Cell Lineage KEGG Pathways colored by gene](hsa04640.pathview.png)

![Jak-Stat Signaling Pathways colored by gene](hsa04630.pathview.png)

![Steroid Hormone Synthesis Pathways colored by gene](hsa00140.pathview.png)

![KEGG Lysosome pathway](hsa04142.pathview.png)

![KEGG Notch Signaling Pathway colored by Gene](hsa04330.pathview.png)

# Gene Ontology

We can also do a similar procedure with gene ontology. Similar to above, go.sets.hs has all GO terms. go.subs.hs is a named list containing indexes for the BP, CC, and MF ontologies. Let’s focus on BP (a.k.a Biological Process) here.

```{r}
data(go.sets.hs)
data(go.subs.hs)
```

Focus on Biological Process subset of GO

```{r}
gobpsets = go.sets.hs[go.subs.hs$BP]

gobpres = gage(foldchanges, gsets=gobpsets, same.dir=TRUE)

lapply(gobpres, head)
```

